#include <iostream>
#include <stdlib.h>
#include <random>
#include <unistd.h>
#include <chrono>
using namespace std;
using chrono::duration_cast;
using chrono::milliseconds;
using chrono::system_clock;

class Board;
class Player;


class Player{                               //Abstract Base Class
private:
    char color;                             //Identification
    int number;
public:
    virtual void Move(Board*board) = 0;     //Pure Virtual Function
    explicit Player(int num);               //Parameterized Constructor
    void assignColor();                     //Assigns initial color of player
    char getColor()const;                   //Returns Color ID
    bool checkWin(Board *board);            //Check if player has won
};

class Console : public Player{              //Derived Object Console Player -- User
public:
    explicit Console(int n): Player(n){};   //Parameterized Constructor
    void Move(Board* board);                //Overloaded Member Function
};

class Computer : public Player{             //Derived Object Computer Player
public:
    explicit Computer(int n): Player(n){};  //Parameterized Constructor
    void Move(Board* board);                //Overloaded Member Function
};

class Board{                                //Object Board
private:
    char array[6][7];                       //In the form of an array
public:
    int count;                              //Total Count of Moves
    Board();                                //Default Constructor
    bool Count();                           //Increments variable count and checks for a tie
    char getValue(int i, int j);            //Returns the value in the position on the board
    void changeValue(int i, int j,char c);  //Updates the value of the position on the board
    void CvsCPlay();                        //Computer vs Computer
    void PvsCPlay();                        //Player vs Computer
    void PvsPPlay();                        //Player vs Player
    void Play(Player* p1, Player* p2);      //Game Execution
    void printBoard();                      //Display Board

};

// //////////////////////////
// /// Class Player /////////
// //////////////////////////


//Parameterized Constructor
Player::Player(int n){
    color = ' ';
    number = n;
}

//Assigns initial color of player
void Player::assignColor(){
    if (number == 1){
        color = 'R'; // Assign player one to be red
    }
    else{
        color = 'Y'; // Assign player two to be yellow
    }
}

//Returns Color ID
char Player::getColor()const{
    return color;
}

//Check if player has won
bool Player::checkWin(Board *board){
    int V = 0;
    int H = 0;
    int FD = 0;
    int BD = 0;
    for (int i = 0; i <= 5; i++){ // look through rows
        for (int j = 0; j <= 6; j++){ // look through columns
            if(board->getValue(i,j) == getColor()){ // Check if position is valid
                //Vertical
                //[i+3][j] to [i-3][j]
                for(int x=3; x>=-3;x--){
                    if(((i+x)>=0)&&((i+x)<=5)){
                        if(board->getValue(i+x,j) == getColor()) V++;
                        else V=0;
                    }
                    if(V==4) {
                        cout << "Player " << getColor() << " wins!" << endl;
                        return true;
                    }
                }
                //Horizontal
                //[i][j+3] to [i][j-3]
                for(int x=3; x>=-3;x--){
                    if(((j+x)>=0)&&((j+x)<=6)){
                        if(board->getValue(i,j+x) == getColor()) H++;
                        else H=0;
                    }
                    if(H==4) {
                        cout << "Player " << getColor() << " wins!" << endl;
                        return true;
                    }
                }
                //Forwards diagonal
                // [i+3][j+3] to [i-3][j-3]
                for(int x=3; x>=-3;x--){
                    if(((i+x)>=0)&&((j+x)>=0)&&((i+x)<=5)&&((j+x)<=6)){
                        if(board->getValue(i+x,j+x) == getColor()) FD++;
                        else FD=0;
                    }
                    if(FD==4) {
                        cout << "Player " << getColor() << " wins!" << endl;
                        return true;
                    }
                }
                //Backwards diagonal
                // [i+3][j-3] to [i-3][j+3]
                for(int x=3; x>=-3;x--){
                    if(((i+x)>=0)&&((j-x)>=0)&&((i+x)<=5)&&((j-x)<=6)){
                        if(board->getValue(i+x,j-x) == getColor()) BD++;
                        else BD=0;
                    }
                    if(BD==4) {
                        cout << "Player " << getColor() << " wins!"<< endl;
                        return true;
                    }
                }
                V=0;
                H=0;
                FD=0;
                BD=0;
            }
        }
    }
    return false;
}

// ///////////////////////////
// /// Class Console /////////
// ///////////////////////////

//Overloaded Member Function -- Move for Players
void Console::Move(Board *board) {
    int slot;
    char color;
    int succeed = 0;

    color = getColor();
    cout << "Which column would you like to drop your piece in?" << endl;
    cin >> slot;
    slot--;
    while(slot < 0 || slot > 6){  //Check if input was valid
        cin.clear();              //Clear invalid input
        cin.ignore(100, '\n');
        cout << "Invalid column number, please try again." << endl;
        cin >> slot;
        slot--;
    }
    for(int i=5;i>-1; i--){
        if(board->getValue(i,slot) == '.'){   //Drop token into the column
            board->changeValue(i,slot,color);
            succeed = 1;
            break;
        }
    }
    if(succeed != 1){
        cout << "This column is full." << endl; //If column is full, ask for a new value
        Console::Move(board);
    }
}

// ////////////////////////////
// /// Class Computer /////////
// ////////////////////////////

//Overloaded Member Function -- Move for Computers
void Computer::Move(Board *board) {
    char color = getColor();
    int succeed = 0;
    int slot;

    //Random number generator
    srand(unsigned (duration_cast<chrono::milliseconds>(system_clock::now().time_since_epoch()).count()));
    slot = rand() %7;

    while(succeed != 1){
        for(int i=5; i>-1; i--){
            if(board->getValue(i,slot) == '.'){
                board->changeValue(i,slot, color); //Drop token into the column
                succeed = 1;
                break;
            }
        }
        if(succeed != 1){  //If the column is full, drop token in a different column
            slot += 17;
            slot = slot% 7;
        }
    }
    usleep(2345678); //Buffer because the random number generator depends on current time
}

// /////////////////////////
// /// Class Board /////////
// /////////////////////////


//Default Constructor
Board::Board(){
    for(int i = 0; i <= 6; i++){
        for(int j = 0; j <= 7; j++){
            array[i][j] = '.';  //Initialize all board positions to '.'
        }
    }
    count = 0; //No turns at the beginning on the game
}

//Increments variable count and checks for a tie
bool Board::Count(){
    //The number of turns - "count" - increments until there are no more available slots on the board.
    if(count<42){
        count++;
        return false;
    }
    //The game ends in a tie if all 42 slots are occupied.
    else{
        cout<< "It's a tie!" << endl;
        return true;
    }
}

//Returns the value in the position on the board
char Board::getValue(int i, int j) {
    return array[i][j];
}

//Updates the value of the position on the board
void Board::changeValue(int i, int j, char c) {
    array[i][j] = c;
}


void Board::printBoard() {
    for(int i=0; i<6; i++){
        for(int j=0; j<7; j++){
            cout << this->array[i][j] << ' '; // Prints the value in the array for each row
        }
        cout << endl; // moves to next row
    }
    cout << endl << endl; // puts a space between the printed board and the next item to be printed
}

//Computer vs Computer
void Board::CvsCPlay(){
    Computer *c1 = new Computer(1);
    Computer *c2 = new Computer(2);
    c1->assignColor();
    c2->assignColor();
    printBoard();
    Play(c1,c2);
}

//Player vs Computer
void Board::PvsCPlay(){
    Console *p = new Console(1);
    Computer *c = new Computer(2);
    p->assignColor();
    c->assignColor();
    printBoard();
    Play(p,c);
}

//Player vs Player
void Board::PvsPPlay(){
    Console *p1 = new Console(1);
    Console *p2 = new Console(2);
    p1->assignColor();
    p2->assignColor();
    printBoard();
    Play(p1,p2);
}

//Game Execution
void Board::Play(Player* p1, Player* p2){
    bool turn = false; //Toggles player turn
    while(!Count()){
        if(!turn){
            cout << "Player " << p1->getColor() << " Move" << endl;
            p1->Move(this); //Execute player move
            printBoard(); //Display board
            if(p1->checkWin(this)) return; //Check for winner
            turn = true; //Next player
        }
        else{
            cout << "Player " << p2->getColor() << " Move" << endl;
            p2->Move(this); //Execute player move
            printBoard(); //Display board
            if(p2->checkWin(this)) return; //Check for winner
            turn = false; //Next player
        }
    }
}

int main() {
    auto *board = new Board; //Prepare new game
    int mode = -1;
    while (mode ==-1){
        cout << "*******************" << endl << "**** CONNECT 4 ****" << endl
        << "*******************" << endl << endl
        << "To Spectate, press 1" << endl << "To Play Solo, press 2" << endl
        << "To Play Two Player, press 3" << endl <<"To Quit, press 0" << endl;
        cin >> mode;
        while(mode!= 1  && mode != 2 && mode !=3 && mode != 0){ //Check if input is valid
            cin.clear();
            cin.ignore(100, '\n');
            cin >> mode;
        }
        if (mode == 1){
            board->CvsCPlay(); //Execute Computer vs Computer
        }
        else if(mode == 2){
            board->PvsCPlay(); //Execute Player vs Computer
        }
        else if(mode == 3){
            board->PvsPPlay(); //Execute Player vs Player
        }
        else if(mode == 0){ //Quit Game
            return 0;
        }
        cout<< "To Replay, press 1" << endl << "To Quit, press 0" << endl;
        while(mode != 0  && mode != 1){ //Post-Game Options
            cin.clear();
            cin.ignore(100, '\n');
            cin >> mode;
        }
    }
    cout << "Thanks for playing!";
    return 0;
}
