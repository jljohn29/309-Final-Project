#include <iostream>
#include <stdlib.h>
#include <random>
#include <unistd.h>
#include <chrono>
using namespace std;
using chrono::duration_cast;
using chrono::milliseconds;
using chrono::system_clock;



class Player{
private:
    char color;
    int number;
public:

   // virtual void Move()=0;
    explicit Player(int num);
    char getColor()const;
    void assignColor();

};


class Board{
private:
    char array[6][7];
public:
    Player *player = nullptr;
    int count;
    Board();
    bool Count();
    char getValue(int i, int j);
    void changeValue(int i, int j,char c);
    bool checkWin(Player *player);
    void playerMove(Player *user);
    void computerMove(Player *computer);
    void CvsCPlay();
    void PvsCPlay();
    void PvsPPlay();
    void Play(Player* p1, Player* p2);
    void printBoard();

};


class Console : public Player{
public:
    Console(int n);
    void Move(Board* board);
};

class Computer : public Player{
public:
    Computer(int n);
    void Move(Board* board);
};

Console::Console(int n) : Player(n) {

}

Computer::Computer(int n) : Player(n) {

}

void Console::Move(Board *board) {
    int slot;
    char color;
    int succeed = 0;

    color = getColor();
    cout << "Which column would you like to drop your piece in?" << endl;
    cin >> slot;
    slot--;
    while(slot < 0 || slot > 6){
        cin.clear();
        cin.ignore(100, '\n');
        cout << "Invalid column number, please try again." << endl;
        cin >> slot;
        slot--;
    }
    for(int i=5;i>-1; i--){
        if(board->getValue(i,slot) == '.'){
            board->changeValue(i,slot,color);
            succeed = 1;
            break;
        }
    }
    if(succeed != 1){
        cout << "This column is full." << endl;
        Console::Move(board);
    }
}

void Computer::Move(Board *board) {
    char color = getColor();
    int succeed = 0;
    int slot;

    srand(unsigned (duration_cast<chrono::milliseconds>(system_clock::now().time_since_epoch()).count()));

    slot = rand() %7;
    while(succeed != 1){
        for(int i=5; i>-1; i--){
            if(board->getValue(i,slot) == '.'){
                board->changeValue(i,slot, color);
                succeed = 1;
                break;
            }
        }
        if(succeed != 1){
            slot += 17;
            slot = slot% 7;
        }
    }
    usleep(2345678);
}

Player::Player(int n){
    color = ' ';
    number = n;
}

// Assign Player Red and Player Yellow
void Player::assignColor(){
    if (number == 1){
        color = 'R'; // Assign player one to be red
    }
    else{
        color = 'Y'; // Assign player two to be yellow
    }
}

char Player::getColor()const{
    return color;
}

Board::Board(){
    for(int i = 0; i <= 6; i++){
        for(int j = 0; j <= 7; j++){
            array[i][j] = '.';
        }
    }
    count = 0;
}

bool Board::Count(){
    //The number of turns - "count" - increments until there are no more available slots on the board.
    if(count<42){
        count++;
        return false;
    }
    //The game ends in a tie if all 42 slots are occupied.
    else{
        cout<< "It's a tie!" << endl;
        return true;
    }
}

char Board::getValue(int i, int j) {
    return array[i][j];
}
void Board::changeValue(int i, int j, char c) {
    array[i][j] = c;
}

// check to see if a player has won
bool Board::checkWin(Player *player){
    int V = 0;
    int H = 0;
    int FD = 0;
    int BD = 0;
    for (int i = 0; i <= 5; i++){ // look through rows
        for (int j = 0; j <= 6; j++){ // look through columns
            if(array[i][j] == player->getColor()){ // Check if position is valid
                //Vertical
                //[i+3][j] to [i-3][j]
                for(int x=3; x>=-3;x--){
                    if(((i+x)>=0)&&((i+x)<=5)){
                        if(array[i+x][j] == player->getColor()) V++;
                        else V=0;
                    }
                    if(V==4) {
                        cout << "Player " << player->getColor() << " wins!" << endl;
                        return true;
                    }
                }
                //Horizontal
                //[i][j+3] to [i][j-3]
                for(int x=3; x>=-3;x--){
                    if(((j+x)>=0)&&((j+x)<=6)){
                        if(array[i][j+x] == player->getColor()) H++;
                        else H=0;
                    }
                    if(H==4) {
                        cout << "Player " << player->getColor() << " wins!" << endl;
                        return true;
                    }
                }
                //Forwards diagonal
                // [i+3][j+3] to [i-3][j-3]
                for(int x=3; x>=-3;x--){
                    if(((i+x)>=0)&&((j+x)>=0)&&((i+x)<=5)&&((j+x)<=6)){
                        if(array[i+x][j+x] == player->getColor()) FD++;
                        else FD=0;
                    }
                    if(FD==4) {
                        cout << "Player " << player->getColor() << " wins!" << endl;
                        return true;
                    }
                }
                //Backwards diagonal
                // [i+3][j-3] to [i-3][j+3]
                for(int x=3; x>=-3;x--){
                    if(((i+x)>=0)&&((j-x)>=0)&&((i+x)<=5)&&((j-x)<=6)){
                        if(array[i+x][j-x] == player->getColor()) BD++;
                        else BD=0;
                    }
                    if(BD==4) {
                        cout << "Player " << player->getColor() << " wins!"<< endl;
                        return true;
                    }
                }
                V=0;
                H=0;
                FD=0;
                BD=0;
            }
        }
    }
    return false;
}

void Board::printBoard() {
  for(int i=0; i<6; i++){
      for(int j=0; j<7; j++){
          cout << this->array[i][j] << ' '; // Prints the value in the array for each row
      }
      cout << endl; // moves to next row
  }
  cout << endl << endl; // puts a space between the printed board and the next item to be printed
}

void Board::playerMove(Player *user){
    int slot;
    char color;
    int succeed = 0;

    color = user->getColor();
    cout << "Which column would you like to drop your piece in?" << endl;
    cin >> slot;
    slot--;
    while(slot < 0 || slot > 6){
        cin.clear();
        cin.ignore(100, '\n');
        cout << "Invalid column number, please try again." << endl;
        cin >> slot;
        slot--;
    }
    for(int i=5;i>-1; i--){
        if(array[i][slot] == '.'){
            array[i][slot] = color;
            succeed = 1;
            break;
        }
    }
    if(succeed != 1){
        cout << "This column is full." << endl;
        Board::playerMove(user);
    }
}

void Board::computerMove(Player *computer){

    char color = computer->getColor();
    int succeed = 0;
    int slot;

    srand(unsigned (duration_cast<chrono::milliseconds>(system_clock::now().time_since_epoch()).count()));

    slot = rand() %7;
    while(succeed != 1){
        for(int i=5; i>-1; i--){
            if(array[i][slot] == '.'){
                array[i][slot] = color;
                succeed = 1;
                break;
            }
        }
        if(succeed != 1){
            slot += 17;
            slot = slot% 7;
        }
    }
    usleep(2345678);
}

void Board::CvsCPlay(){
    bool turn = false;
    auto *c1 = new Player(1);
    auto *c2 = new Player(2);
    c1->assignColor();
    c2->assignColor();
    printBoard();
    while(!Count()){
        if(!turn){
            cout << "Player " << c1->getColor() << " Move" << endl;
            computerMove(c1);
            printBoard();
            if(checkWin(c1)) return;
            turn = true;
        }
        else{
            cout << "Player " << c2->getColor() << " Move" << endl;
            computerMove(c2);
            printBoard();
            if(checkWin(c2)) return;
            turn = false;
        }

    }
}
void Board::PvsCPlay(){
    bool turn = false;
    auto *p = new Player(1);
    auto *c = new Player(2);
    p->assignColor();
    c->assignColor();
    printBoard();
    while(!Count()){
        if(!turn){
            cout << "Player " << p->getColor() << " Move" << endl;
            playerMove(p);
            printBoard();
            checkWin(p);
            turn = true;
        }
        else{
            cout << "Player " << c->getColor() << " Move" << endl;
            computerMove(c);
            printBoard();
            checkWin(c);
            turn = false;
        }
    }
}

void Board::PvsPPlay(){
    auto *p1 = new Player(1);
    auto *p2 = new Player(2);
    p1->assignColor();
    p2->assignColor();
    printBoard();
    Play(p1,p2);
};

void Board::Play(Player* p1, Player* p2){
    bool turn = false;
    while(!Count()){
        if(!turn){
            cout << "Player " << p1->getColor() << " Move" << endl;
            playerMove(p1);
            printBoard();
            if(checkWin(p1)) return;
            turn = true;
        }
        else{
            cout << "Player " << p2->getColor() << " Move" << endl;
            playerMove(p2);
            printBoard();
            if(checkWin(p2)) return;
            turn = false;
        }
    }
}

int main() {
    auto *board = new Board;
    int mode = 0;
    while (mode ==0){
        cout << "*******************" << endl << "**** CONNECT 4 ****" << endl
        << "*******************" << endl << endl
        << "To Spectate, press 1" << endl << "To Play Solo, press 2" << endl
        << "To Play Two Player, press 3" << endl <<"To Quit, press 4" << endl;
        cin >> mode;
        while(mode!= 1  && mode != 2 && mode !=3 && mode != 4){
            cin.clear();
            cin.ignore(100, '\n');
            cin >> mode;
        }
        if (mode == 1){
            board->CvsCPlay();
        }
        else if(mode == 2){
            board->PvsCPlay();
        }
        else if(mode == 3){
            board->PvsPPlay();
        }
        else if(mode == 4){
            return 0;
        }
        cout<< "To Replay, press 0" << endl << "To Quit, press 1" << endl;
        while(mode != 0  && mode != 1){
            cin.clear();
            cin.ignore(100, '\n');
            cin >> mode;
        }
    }
    cout << "Thanks for playing!";
    return 0;
}
